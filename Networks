//7. WAP to create a socket, connect to remote server, send some data and receive a reply.

server.c

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<netinet/in.h>

void error(const char *msg){
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[]){

    if(argc<2){
        fprintf(stderr, "Port no. not provided. Program terminated\n");
        exit(1);
    }

    int sockfd, newsockfd, portno, n;
    char buffer[255];

    // sockaddr_in gives us the internet address, it is included in the file <netinet/in.h>
    struct sockaddr_in serv_addr, cli_addr;
    socklen_t clilen;      			//socklen_t is a datatype in socket.h 

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if(sockfd<0){
        error("Error opening socket.");
    }

    //bzero clears any data or text 
    bzero((char *) &serv_addr, sizeof(serv_addr));
    portno = atoi(argv[1]);

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);    //htons = host to network short


    //we need to typecast sockaddr_in into sockaddr
    if(bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr))<0){
        error("Binding failed.");
    }


    // Next step is Listening
    listen(sockfd, 5);					// 5 gives the max. limit of clients
    clilen = sizeof(cli_addr); 

    /* Next, whenever we accept a connection, we get a new file descriptor
    again we need to typecast sockaddr_in into sockaddr*/
    newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);

    if(newsockfd<0){
        error("Error on accept!");
    }

    while(1){
        bzero(buffer, 255);
        n = read(newsockfd, buffer, 255);
        if(n<0){
            error("Error on reading!");
        }
        printf("Client: %s\n", buffer);
        
        bzero(buffer, 255);
        fgets(buffer, 255, stdin);
        
        n = write(newsockfd, buffer, strlen(buffer));
        if(n<0){
            error("Error on writing");
        }

        int i = strncmp("Bye", buffer, 3);
        if(i==0){
            break;
        }
     }
        close(newsockfd);
        close(sockfd);
        return 0;
    }
---------------
client.c

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<netdb.h>

void error(const char *msg){
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[]){

    if(argc<3){
        fprintf(stderr, "Usage: %s Hostname Port \n", argv[0]);
        exit(1);
    }

    int sockfd, portno, n;
    struct sockaddr_in serv_addr;
    char buffer[256];
    struct hostent *server;      //hostent structure is used to store info. about a given host; included in <netdb.h>

    portno = atoi(argv[2]);
    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if(sockfd<0)
        error("Error opening socket.");
    
    server = gethostbyname(argv[1]);
    if(server==NULL){
        fprintf(stderr, "No such host");
    }

    bzero((char*) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    
    //Transferring info. from *server into serv_addr
    bcopy((char *) server->h_addr, (char *) &serv_addr.sin_addr.s_addr, server->h_length);
    
    serv_addr.sin_port = htons(portno);

//Next try connecting to the server
    if(connect(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr))<0)
        error("Connection failed");
    
    while(1){
        bzero(buffer, 255);
        fgets(buffer, 255, stdin);

        n = write(sockfd, buffer, strlen(buffer));
        if(n<0){
            error("Error on writing.");
        }
        
        bzero(buffer, 255);
        n = read(sockfd, buffer, 255);
        if(n<0){
            error("Error on reading.");
        }

        printf("Server: %s", buffer);

        int i = strncmp("Bye", buffer, 3);
        if(i==0){
            break;
        }
    }
    close(sockfd);
    return 0;
}
-------
Server side: 
gcc server.c -o server 
./server 5000

Client side: 
gcc client.c -o client 
./client 127.0.0.1 5000(separate terminal)
---------------------------

//WAP to implement the transfer of files using UNIX socket programming

client.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#define SIZE 1024

void send_file(FILE *fp, int sockfd){
  int n;
  char data[SIZE] = {0};

  while(fgets(data, SIZE, fp) != NULL) {
    if (send(sockfd, data, sizeof(data), 0) == -1) {
      perror("[-]Error in sending file.");
      exit(1);
    }
    bzero(data, SIZE);
  }
}

int main(){
  char *ip = "127.0.0.1";
  int port = 8080;
  int e;

  int sockfd;
  struct sockaddr_in server_addr;
  FILE *fp;
  char *filename = "sent.txt";

  sockfd = socket(AF_INET, SOCK_STREAM, 0);
  if(sockfd < 0) {
    perror("[-]Error in socket");
    exit(1);
  }
  printf("[+]Server socket created successfully.\n");

  server_addr.sin_family = AF_INET;
  server_addr.sin_port = port;
  server_addr.sin_addr.s_addr = inet_addr(ip);

  e = connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr));
  if(e == -1) {
    perror("[-]Error in socket");
    exit(1);
  }
	printf("[+]Connected to Server.\n");

  fp = fopen(filename, "r");
  if (fp == NULL) {
    perror("[-]Error in reading file.");
    exit(1);
  }

  send_file(fp, sockfd);
  printf("[+]File data sent successfully.\n");

	printf("[+]Closing the connection.\n");
  close(sockfd);

  return 0;
}

server.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#define SIZE 1024

void write_file(int sockfd){
  int n;
  FILE *fp;
  char *filename = "recv.txt";
  char buffer[SIZE];

  fp = fopen(filename, "w");
  while (1) {
    n = recv(sockfd, buffer, SIZE, 0);
    if (n <= 0){
      break;
      return;
    }
    fprintf(fp, "%s", buffer);
    bzero(buffer, SIZE);
  }
  return;
}

int main(){
  char *ip = "127.0.0.1";
  int port = 8080;
  int e;

  int sockfd, new_sock;
  struct sockaddr_in server_addr, new_addr;
  socklen_t addr_size;
  char buffer[SIZE];

  sockfd = socket(AF_INET, SOCK_STREAM, 0);
  if(sockfd < 0) {
    perror("[-]Error in socket");
    exit(1);
  }
  printf("[+]Server socket created successfully.\n");

  server_addr.sin_family = AF_INET;
  server_addr.sin_port = port;
  server_addr.sin_addr.s_addr = inet_addr(ip);

  e = bind(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr));
  if(e < 0) {
    perror("[-]Error in bind");
    exit(1);
  }
  printf("[+]Binding successfull.\n");

  if(listen(sockfd, 10) == 0){
		printf("[+]Listening....\n");
	}else{
		perror("[-]Error in listening");
    exit(1);
	}

  addr_size = sizeof(new_addr);
  new_sock = accept(sockfd, (struct sockaddr*)&new_addr, &addr_size);
  write_file(new_sock);
  printf("[+]Data written in the file successfully.\n");

  return 0;
}
--------------
save file "sent.txt" beforehand and open file- cat recv.txt
---------------------
//bit_stuffing

#include<stdio.h>

#include<string.h>
void main()
{
    char a[20];
    int count=0, i=0, j, l, k=0;
    // printf("Enter size: ");
    // scanf("%d", &l);
    printf("Enter the input string: \n");
    scanf("%s", a);

    l = strlen(a);
    for(i=0; i < l; i++)
    if(a[i] == '1')
    {
        k = i;
        count = 0;
        while(a[k] == '1')
        {
            count += 1;
            k++;
            if(count == 5)
            {
                for(j = l + 1; j > k; j--)
                {
                    a[j] = a[j - 1];
                }
                a[k] = '0';
                l++;
                break;
            }
            i = k;
        }
    }
    printf("\n The bitstuffed string is %s\n", a);
    //getch();
}
gcc bit_stuffing.c -o bit_stuffing
./bit_stuffing
------------

//byte_stuffing

#include<stdio.h>
#include<string.h>

void main(){  

 char frame[50][50],str[50][50];

 char flag[4];
 strcpy(flag,"flag");

 char esc[4];
 strcpy(esc,"esc");

 int i,j,k=0,n;
 strcpy(frame[k++],"flag");

 printf("Enter no. of strings in the data: ");
 scanf("%d",&n);

 printf("Enter Strings: \n");
 for(i=0;i<=n;i++)
   {
  gets(str[i]);
   }

 printf("You entered :\n");
 for(i=0;i<=n;i++)
  {
  puts(str[i]);
  }

 printf("\n");
 for(i=0;i<=n;i++)
   {
      if(strcmp(str[i],flag)!=0 && strcmp(str[i],esc)!=0)
            {
                   strcpy(frame[k++],str[i]);
            }
      else
         {
            strcpy(frame[k++],"esc");
            strcpy(frame[k++],str[i]);
         }
   }
 strcpy(frame[k++],"flag");
//frame[k++]='\0';

printf("Byte stuffing at sender side:\n\n");

for(i=0;i<k;i++)
  {
    printf("%s ",frame[i]);
  }
}
-------------------

//even parity
#include<stdio.h>
#include<string.h>

int main(){

    char arr[20];
    int i, count =0;

    printf("Enter the string: ");
    scanf("%s", arr);

    int len = strlen(arr);
    for(int i=0; i<len; i++){
        if(arr[i]=='1'){
            count++;
        }
    }

    if(count%2==0){
        arr[len++]='0';
    }else{
        arr[len++]='1';
    }
        printf("\n----USING EVEN PARITY---\n\nString with parity bit: ");
        for(i=0;i<len;i++){
            printf("%c", arr[i]);
        }

        return 0;
}
in even parity- if no of 1s is odd, parity= 1 ,,,,,,,,, if no of 1s is even, parity = 0
-------

//odd parity

#include<stdio.h>
#include<string.h>

int main(){

    char arr[20];
    int i, count =0;

    printf("Enter the string: ");
    scanf("%s", arr);

    int len = strlen(arr);
    for(int i=0; i<len; i++){
        if(arr[i]=='1'){
            count++;
        }
    }

    if(count%2==0){
        arr[len++]='1';
    }else{
        arr[len++]='0';
    }
        printf("\n----USING ODD PARITY---\n\nString with parity bit: ");
        for(i=0;i<len;i++){
            printf("%c", arr[i]);
        }

        return 0;
}
in odd parity- if no of 1s is odd, parity= 0 ,,,,,,,,, if no of 1s is even, parity = 1
-------
